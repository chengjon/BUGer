apiVersion: apps/v1
kind: Deployment
metadata:
  name: buger-app
  namespace: buger-system
  labels:
    app: buger
    component: api
    version: "1.0.0"
spec:
  replicas: 3  # 默认 3 个副本，可根据实际需求调整
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0  # 确保服务可用性
  selector:
    matchLabels:
      app: buger
      component: api
  template:
    metadata:
      labels:
        app: buger
        component: api
        version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3050"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: buger-app
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: buger-app
        image: buger:1.0.0  # 注意：请更新为实际的镜像仓库地址，如 registry.example.com/buger:1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 3050
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP

        # 环境变量配置
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: buger-config
              key: NODE_ENV
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: buger-config
              key: LOG_LEVEL
        - name: PORT
          value: "3050"
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              name: buger-mongodb-secret
              key: mongodb-uri
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: buger-redis-secret
              key: redis-uri
        - name: CORS_ORIGIN
          value: "http://localhost:3000,http://localhost:3050"

        # 资源限制和请求
        resources:
          requests:
            cpu: "500m"
            memory: "512Mi"
          limits:
            cpu: "1000m"
            memory: "1Gi"

        # 健康检查
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2

        startupProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 20  # 100 秒内必须启动完成

        # 安全上下文
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE

        # 日志配置
        volumeMounts:
        - name: log-volume
          mountPath: /var/log/buger

      # 节点亲和性
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - buger
              topologyKey: kubernetes.io/hostname

      # 容错配置
      tolerations:
      - key: "app"
        operator: "Equal"
        value: "buger"
        effect: "NoSchedule"

      # 卷配置
      volumes:
      - name: log-volume
        emptyDir: {}

      # 终止宽限期
      terminationGracePeriodSeconds: 30

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: buger-app-hpa
  namespace: buger-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: buger-app
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
